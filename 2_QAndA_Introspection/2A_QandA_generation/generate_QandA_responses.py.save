import json
import requests
import random
import string
import os
from datetime import datetime
import time

# Get current date in yy_mm_dd format
current_date = datetime.now().strftime('%y_%m_%d')

# OpenAI API key
openai_api_key = os.getenv('OPENAI_API_KEY')

import json
import random
import string
import os

# Toggle verbosity for more detailed output
verbose = True

def make_agents_if_dont_exist():
    # Function to generate random properties for agents
    def generate_agent_properties():
        return {
            "optimism": random.choice(["high", "medium", "low"]),
            "efficiency": random.uniform(0.5, 1.0),  # Values between 0.5 and 1.0
            "intelligence": random.randint(90, 160),  # IQ range
            "trustworthiness": random.choice(["trustworthy", "neutral", "untrustworthy"]),
            "creativity": random.choice(["high", "medium", "low"]),
            "resilience": random.choice(["high", "medium", "low"]),
            "leadership": random.choice(["strong", "average", "weak"]),
            "empathy": random.choice(["high", "medium", "low"]),
            "communication": random.choice(["excellent", "good", "poor"]),
            "adaptability": random.choice(["high", "medium", "low"]),
            "decision_making": random.choice(["decisive", "hesitant", "impulsive"]),
            "teamwork": random.choice(["excellent", "good", "poor"]),
            "problem_solving": random.choice(["excellent", "average", "poor"]),
            "attention_to_detail": random.choice(["high", "medium", "low"]),
            "stress_tolerance": random.choice(["high", "medium", "low"]),
            "risk_taking": random.choice(["calculated", "reckless", "risk-averse"])
        }

    # Function for verbose logging
    def log(message):
        if verbose:
            print(message)

    # Check if the JSON file exists
    json_file_path = f"agent_properties_{repeat_num}.json"
    if os.path.exists(json_file_path):
        log(f"Loading agent properties from {json_file_path}...")
        with open(json_file_path, "r") as file:
            agent_properties = json.load(file)
    else:
        log("Generating new agent properties...")
        # Generate 10 unique agents with properties
        agent_properties = {}
        for i in range(10):
            name = ''.join(random.choices(string.ascii_uppercase, k=7))
            agent_properties[name] = generate_agent_properties()
            log(f"Generated properties for agent {name}: {agent_properties[name]}")

        # The first agent is special
        special_agent = list(agent_properties.keys())[0]
        log(f"Special agent is {special_agent}")

        # Save to JSON file
        with open(json_file_path, "w") as file:
            json.dump(agent_properties, file, indent=4)
        log(f"Agent properties saved to {json_file_path}")

    return agent_properties, special_agent

agent_properties, special_agent = make_agents_if_dont_exist()

categories = [
    "Answer the reason for things (infer reasons) -> textbook learning, quizzing",
    "Answer what things are done by whom -> textbook learning, quizzing",
    "List criteria -> textbook learning",
    "Answer questions under a context like 'without being prompted' (more of a theory of mind thing)",
    "List things that are related and unrelated -> textbook learning, quizzing",
    "Asking if things are possible -> textbook learning, quizzing",
    "Asking temporal questions (with relation to text generation, as in, in current text generation, or in former, etc) -> quizzing",
    "Describe things -> textbook learning",
    "Identify aspects of things and features of things -> textbook learning, quizzing",
    "Identify changes in things -> textbook learning, quizzing",
    "Identify sources of changes -> textbook learning, quizzing",
    "Understand what other agents can observe -> textbook learning, quizzing",
    "Understand what other agents can explain -> textbook learning, quizzing",
    "Asking what it can detect or not -> quizzing",
    "Identify things occurring within processes -> textbook learning",
    "Asking about possession of things or not -> textbook learning, quizzing",
    "Understanding what people tend to do -> textbook learning",
    "Answer 'why' -> textbook learning",
    "Answer 'how' something is done -> textbook learning",
    "Answer questions about preferences for self and others -> textbook learning, quizzing",
    "Answer what is inside or outside -> textbook learning, quizzing",
    "Answer what is known or not known by others and self -> quizzing",
    "Answer open-ended questions with no clear right/wrong answer -> textbook learning",
    "Being able to talk about agents, including itself, in long form, and characterize them -> textbook learning"
]

def generate_story_prompt(agents_to_print, random_categories, special_agent):
    # Build the agent list in the story
    agent_descriptions = ''
    if agents_to_print:
        for agent_name in agents_to_print:
            if agent_name == special_agent:
                agent_descriptions += f"Agent [{agent_name}] (special)\n"
            else:
                agent_descriptions += f"Agent [{agent_name}]\n"
    else:
        agent_descriptions = "No agents are involved in this story.\n"

    # Create the prompt
    prompt = f"""
Please create a background story involving the following agents:

{agent_descriptions}

After the story, please create questions and answers about the story covering the following categories:

"""

    # List the categories with numbers
    for i, category in enumerate(random_categories, 1):
        prompt += f"{i}. {category}\n"

    # Provide an example format
    prompt += """
Please present the response in the following format:

---

Background Story:

[Your story here]

---

Questions and Answers:

1. Q: [Question] -> [Category]

Answer: [Answer]

2. Q: [Question] -> [Category]

Answer: [Answer]

...

Make sure to:

- Generate questions and answers that are directly related to the story and cover the specified categories.
- Use only the agents specified, and their names should be in the format [AGENT_NAME].
- Do not introduce any new agents.
- Do not mention the categories in the questions or answers; they are just for your reference.
- Do not include any additional commentary.

"""

    return prompt

def call_gpt4o_mini_api(prompt):
    url = "https://api.openai.com/v1/chat/completions"
    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer " + openai_api_key
    }
    data = {
        "model": "gpt-4o-mini",
        "messages": [
            {"role": "system", "content": "You are an AI language model that generates educational stories and quizzes."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7,
        "max_tokens": 1500
    }

    response = requests.post(url, headers=headers, data=json.dumps(data))
    return response.json()

# Save prompts to a single file
def save_prompts_to_file(prompt, filename=f"prompts_{current_date}.txt"):
    with open(filename, "a") as file:
        file.write(prompt)
        file.write("<|SEPARATOR_OF_PAGES|>\n")

# Save responses to a single file
def save_responses_to_file(response, filename=f"responses_{current_date}.txt"):
    with open(filename, "a") as file:
        file.write(json.dumps(response))
        file.write("<|SEPARATOR_OF_PAGES|>\n")

# Loop over 50 iterations
for iteration in range(50):
    print(f"Iteration {iteration+1}")
    # Select number of agents based on weighted probabilities
    num_agents = random.choices([0, 1, 2, 3, 4], weights=[0.2, 0.25, 0.35, 0.15, 0.05])[0]

    if num_agents == 0:
        agents_to_print = []
    else:
        # Select unique agents excluding the special agent
        agents_to_print = random.sample([name for name in names_list if name != special_agent], num_agents)

        # 50% chance to include the special agent if any agents are being printed
        if random.random() < 0.5 and special_agent not in agents_to_print:
            if agents_to_print:
                agents_to_print[0] = special_agent
            else:
                agents_to_print.append(special_agent)

    # Randomly select 5 categories
    random_categories = random.sample(categories, 5)

    # Generate the prompt
    prompt = generate_story_prompt(agents_to_print, random_categories, special_agent)
    print("prompt")
    print(prompt)
    quit()
    # Save the prompt
    save_prompts_to_file(prompt)

    # Call the API
    response = call_gpt4o_mini_api(prompt)

    # Save the response
    save_responses_to_file(response)

    # Print progress
    agent_names = ', '.join(agents_to_print) if agents_to_print else "No agents"
    print(f"Generated story with agents: {agent_names}")
